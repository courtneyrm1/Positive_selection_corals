#This is the pipeline I used to detect positive selection in immune genes across multiple transcriptomes. Throughtout the pipeline, I had to change
filenames and transcript headers repeatedly. I tried to keep to the format Species_geneid, changing only when a program required different formats.
. I will add some of the scripts for this at the end. 


#Make blast database using immune genes 
makeblastdb -in immune_seqs.fa -dbtype nucl -parse_seqids -out immune_genes #MAKEBLASTDB

#Loop over multiple files using tblastn
for f in *transcriptomes.fa; do tblastn -query $f -db DB_Pb3 -evalue 1.0e-5 -outfmt 6 -max_target_seqs 1 -out ${f}_pb3_blast.fa; done

#To make things easier I moved each transcriptome and BLAST results to a separate folder for each species and repeated the next steps separate for each species.

#trim first column of BLAST output
gawk -i inplace '{$1=""; print $0}'

#sort blast results by query, bit then e and keep top e only
export LANG=C; export LC_ALL=C; sort -k1,1 -k12,12gr -k11,11g -k3,3gr output | sort -u -k1,1 --merge > bestHits

#CREATE CSV FILE FOR EACH GENE 
awk -F, '{ print > $1 ".csv" }' transcriptome.csv

#force awk through file limit using 
ulimit -Sn 5000

#The next steps:
#1. multiple csv files w/ gene #; transcript # ex: (022797785.1;Transcript101020)
#2. gene #.csv with transcript hit as content (2H19Q.csv containing Transcript67686)
#3. gene #.fa w/ transcript hit as > content
#4. gene #.fa w/ transcript hit annotated (>Transcript_4446_Cd_1JF2) #Cd is just example abbv for your species name

for f in *.csv; do mv "$f" "${f%;*}"; done #TRIM FILE NAME/RM EVERYTHING AFTER ";" FROM 991028.1;Transcript_13856?.csv
for f in *; do mv "$f" "$f.csv"; done #ADD EXTENSION

#SEQKIT GREP 
#https://bioinf.shenwei.me/seqkit/
for file in *.csv; do
    seqkit grep -f "$file" transcriptome.fa -o "$file.fa"
done

#cat all files back together keeping each species separate.

#run TransDecoder. Probably not necessary however this helped later down the line with allowing pal2nal to run
Transdecoder.LongORFs -t transcriptome.fa
TransDecoder.Predict -t transcriptome.fa

#cd-hit to remove sequences more than 95% similar from each species on .pep files
for f in *.fa; do cd-hit-est -i $f -o $f.fa -c 0.95; done

#copy cleaned transcriptomes to a directory /transcriptomes inside orthofinder directory. Run orthofinder.

orthofinder -f /transcriptomes -S diamond -M msa -A mafft -T fasttree -t 16

#Copy gene trees and multiple sequence alignents for each orthogroup to a new directory /orthogroups and run phylopypruner to remove paralogs.
Phylopypruner needs @ between species and gene Id which was changed using sed. 

phylopypruner --output /phylo_output_dir --dir /orthogroups --min-taxa 10 --min-support 1.0 --prune LS

#A headlist of genes in each orthogroup from the phylopypruner output needs to be created for pal2nal.

for file in *.fa; do grep '>' $file > "$(basename "$file" .tex)_headlist.txt"; done

#cat all of the .cds transcriptomes from the transdecoder output into one file allcds.cds and add to a new directory with headlists

#seqkit for loop (first remove > from each transcript using sed) to get cds for each gene in each orthogroup
for file in *.fa_headlist.txt; do seqkit grep -f "$file" allcds.cds -o "$file.fa"; done

#Now sort alphabetically cds files as well as protein coding orthogroup sequences from phylopypruenr output 
for i in *.fa; do seqkit sort --quiet $i > "$i.fa.txt"; done

#make sure orthogroups have the same name but different extension for protein alignments and coding sequence and copy to a new directory pal2nal. May need to 
modify names to make sure each header is the same for each gene in each orthogroup. Now run pal2nal. This will give the alignments in nucleotide format
for i in `ls -1 *.fa`; do name=$(basename ${i} .fa); echo ${name}; pal2nal.pl ${name}.msa ${name}.fa -output paml > ${name}.cds; done

#Take the phylopypruner output alignments and create new gene trees for each orthogroup using iqtree2

for i in /*.fa; do bin/iqtree2 -s $i; done

#Take the gene trees generated by IQTree2 and add to a directory, changing extension to .tree if needed. Then run the R script to clean and unroot trees. Make
sure to trim names again after to orthogroupname.tree

#Take cleaned and unrooted trees and and the pal2nal output nucleotide alignments and copy to a new folder codeml. create a list of each treefile and each alignment filename.
#Need to generate control files using perl script provided
CODEML_TREE_ALN_ALT.pl treelist.txt alignment.txt

#Now in the codeml folder there should be a control file, gene tree and nucleotide alignment for each orthogroup. To run codeml crate a shell script file containing:
for i in *.ctl; do ./codeml.exe $i; done.

#to automate codeml to avoid pressing enter at each gene, use: 
yes \n | codemlshellscript


#trimeverything after second _ and including _ (change 2 to 3 for third) within file
for f in *.fa; do  sed -i 's/_[^_]*//2g' $f; done

#trim >Gene.2::Species_1@100 to >Species_1@100 on lines beginning >
sed -i '/^>/s/Gene.*://' *

#remove last n chars from filename including extension
rename 's/.{n}$//' *

#remove between > and a letter  (e.g. A)
sed 's/>['A>]*A/A/g' 

#change file type from extensionless to something e.g. .tree
for f in *; do mv "$f" "$f.tre"; done

#keep only the names of species and genes after transdecoder
sed '/^[[:space:]]*$/d' *.fa




